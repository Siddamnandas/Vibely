/**
 * @jest-environment jsdom
 */

import { sharingService, shareToInstagramStories, shareGeneric } from "@/lib/sharing";

// Mock Web Share API
const mockShare = jest.fn();
const mockCanShare = jest.fn();

// Mock URL API
global.URL.createObjectURL = jest.fn().mockReturnValue("blob:test-url");
global.URL.revokeObjectURL = jest.fn();

// Mock fetch for image processing
global.fetch = jest.fn();

describe("Sharing Integration", () => {
  beforeEach(() => {
    jest.clearAllMocks();

    // Reset navigator.share
    Object.defineProperty(navigator, "share", {
      value: mockShare,
      writable: true,
      configurable: true,
    });

    Object.defineProperty(navigator, "canShare", {
      value: mockCanShare,
      writable: true,
      configurable: true,
    });

    // Mock user agent for platform detection
    Object.defineProperty(navigator, "userAgent", {
      value: "Mozilla/5.0 (iPhone; CPU iPhone OS 14_0 like Mac OS X)",
      writable: true,
      configurable: true,
    });
  });

  it("should use Web Share API when available", async () => {
    mockCanShare.mockReturnValue(true);
    mockShare.mockResolvedValue(undefined);

    const success = await sharingService.share({
      title: "Check out my AI cover!",
      text: "Amazing cover generated by Vibely",
      url: "https://vibely.app/cover/123",
    });

    expect(success).toBe(true);
    expect(mockShare).toHaveBeenCalledWith({
      title: "Check out my AI cover!",
      text: "Amazing cover generated by Vibely",
      url: "https://vibely.app/cover/123",
    });
  });

  it("should share to Instagram Stories with image", async () => {
    mockCanShare.mockReturnValue(true);
    mockShare.mockResolvedValue(undefined);

    // Mock image fetch
    const mockBlob = new Blob(["fake-image-data"], { type: "image/jpeg" });
    (fetch as jest.Mock).mockResolvedValue({
      ok: true,
      blob: () => Promise.resolve(mockBlob),
    });

    const success = await shareToInstagramStories(
      "My AI Cover",
      "https://example.com/cover.jpg",
      "Check out this amazing AI-generated cover!",
      "track-123",
    );

    expect(success).toBe(true);
    expect(fetch).toHaveBeenCalledWith("https://example.com/cover.jpg");
    expect(mockShare).toHaveBeenCalledWith(
      expect.objectContaining({
        files: expect.arrayContaining([
          expect.objectContaining({
            name: "cover.jpg",
            type: "image/jpeg",
          }),
        ]),
      }),
    );
  });

  it("should fall back to copy to clipboard when Web Share API is not available", async () => {
    // Remove Web Share API support
    delete (navigator as any).share;
    delete (navigator as any).canShare;

    // Mock clipboard API
    const mockWriteText = jest.fn().mockResolvedValue(undefined);
    Object.defineProperty(navigator, "clipboard", {
      value: { writeText: mockWriteText },
      writable: true,
      configurable: true,
    });

    const success = await shareGeneric(
      "My AI Cover",
      "Check out this cover!",
      "https://vibely.app/cover/123",
    );

    expect(success).toBe(true);
    expect(mockWriteText).toHaveBeenCalledWith("https://vibely.app/cover/123");
  });

  it("should detect iOS and show Instagram deep link", async () => {
    // Mock iOS user agent
    Object.defineProperty(navigator, "userAgent", {
      value: "Mozilla/5.0 (iPhone; CPU iPhone OS 14_0 like Mac OS X)",
    });

    delete (navigator as any).share;
    delete (navigator as any).canShare;

    // Mock window.open
    const mockOpen = jest.fn();
    global.open = mockOpen;

    const success = await sharingService.share(
      {
        title: "Test",
        text: "Test",
        url: "https://test.com",
      },
      {
        platform: "instagram-stories",
        imageUrl: "https://example.com/image.jpg",
      },
    );

    // Should attempt to open Instagram deep link
    expect(mockOpen).toHaveBeenCalledWith(expect.stringContaining("instagram://"), "_blank");
  });

  it("should share with file objects", async () => {
    mockCanShare.mockReturnValue(true);
    mockShare.mockResolvedValue(undefined);

    const mockFile = new File(["test"], "cover.jpg", { type: "image/jpeg" });

    const success = await sharingService.share({
      title: "My Cover",
      text: "Check it out!",
      files: [mockFile],
    });

    expect(success).toBe(true);
    expect(mockShare).toHaveBeenCalledWith({
      title: "My Cover",
      text: "Check it out!",
      files: [mockFile],
    });
  });

  it("should handle sharing failures gracefully", async () => {
    mockCanShare.mockReturnValue(true);
    mockShare.mockRejectedValue(new Error("User cancelled"));

    const success = await shareGeneric("Test", "Test message");

    expect(success).toBe(false);
  });

  it("should track sharing analytics", async () => {
    mockCanShare.mockReturnValue(true);
    mockShare.mockResolvedValue(undefined);

    // Mock analytics event listener
    const analyticsHandler = jest.fn();
    window.addEventListener("analytics-track", analyticsHandler);

    await sharingService.share({
      title: "Test",
      text: "Test",
      url: "https://test.com",
    });

    // Check if analytics event was dispatched
    expect(analyticsHandler).toHaveBeenCalledWith(
      expect.objectContaining({
        detail: expect.objectContaining({
          event: "share_completed",
        }),
      }),
    );

    window.removeEventListener("analytics-track", analyticsHandler);
  });

  it("should generate proper share URLs for different platforms", () => {
    const shareUrl = sharingService.generateShareUrl("facebook", {
      url: "https://vibely.app/cover/123",
      text: "Check out my AI cover!",
    });

    expect(shareUrl).toContain("facebook.com/sharer");
    expect(shareUrl).toContain(encodeURIComponent("https://vibely.app/cover/123"));
  });

  it("should validate share data before sharing", () => {
    const validData = {
      title: "Test",
      text: "Test message",
      url: "https://test.com",
    };

    const isValid = sharingService.validateShareData(validData);
    expect(isValid).toBe(true);

    const invalidData = {};
    const isInvalid = sharingService.validateShareData(invalidData);
    expect(isInvalid).toBe(false);
  });
});
